<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.4//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.imooc.oa.dao.EmployeeDao">


    <!--
   1、resultMap属性：type为java实体类；id为此resultMap的标识
   2、resultMap的子元素：
       id – 一般对应到数据库中该行的ID,设置此项可以提高Mybatis性能.
       result – 映射到JavaBean 的某个“简单类型”属性,String,int等.
       association – 映射到JavaBean 的某个“复杂类型”属性,其他JavaBean类.
       collection –复杂类型集合 (演示示例2)
    -->
    <resultMap id="employee" type="Employee">
        <id property="sn" column="sn" javaType="String"/>
        <result property="password" column="password" javaType="String"/>
        <result property="name" column="name" javaType="String"/>
        <result property="departmentSn" column="department_sn" javaType="String"/>
        <result property="post" column="post" javaType="String"/>
        <association property="department" column="department_sn" javaType="Department">
            <id property="sn" column="dsn" javaType="String"/>
            <result property="name" column="dname" javaType="String"/>
        </association>
    </resultMap>


    <insert id="insert" parameterType="Employee">
        insert into employee values(#{sn},#{password},#{name},#{departmentSn},#{post})
    </insert>

    <update id="update" parameterType="Employee">
        update employee set name=#{name},password=#{password},department_sn=#{departmentSn},post=#{post} where sn=#{sn}
    </update>

    <delete id="delete" parameterType="String">
        delete from employee where sn=#{sn}
    </delete>

    <select id="select" parameterType="String" resultMap="employee">
        select e.*,d.sn dsn,d.name dname from employee e left join department d on d.sn=e.department_sn
         where e.sn=#{sn}
    </select>

    <select id="selectAll" resultMap="employee">
        select e.*,d.sn dsn,d.name dname from employee e left join department d on d.sn=e.department_sn
    </select>

    <select id="selectAllByPage" resultMap="employee">
        select e.*,d.sn dsn,d.name dname from employee e left join department d on d.sn=e.department_sn LIMIT #{limit} ,#{offset}
    </select>

    <select id="selectCount" resultType="int">
        select count(*) from employee
    </select>


    <!-- <select id="findByPage" parameterType="Map" resultMap="employee">select e.*,d.sn dsn,d.name dname from employee e
         left join department d on d.sn=e.department_sn
         <if test="limit!=null and offset!=null">
             limit #{list},#{offset}
         </if>
     </select>-->


    <select id="selectByDepartmentAndPost" resultMap="employee">
        select e.*,d.sn dsn,d.name dname from employee e left join department d on d.sn=e.department_sn
        where e.sn is not NULL
        <if test="dsn!=null">
            and e.department_sn=#{dsn}
        </if>
        <if test="post!=null">
            and e.post=#{post}
        </if>
    </select>








</mapper>